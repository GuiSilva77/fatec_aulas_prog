/**
 *    O programa tem como objetivo determinar se certa matriz 9x9 digitada pelo usuário
 *  é um quadrado mágico ou não por meio de certas condições, e para isso foi necessário
 *  o conhecimento de estruturas de repetição, entender o funcionamento de uma matriz e como
 *  fazer uma varredura nos elementos da matriz, tanto para armazenar os dados quanto 
 *  para buscar certo valor.
 *   
 * Guilherme Felipe Cristian da Silva - 0220482113028
 **/
#include <stdio.h>
#include <stdlib.h>

#define LINHA 9
#define COLUNA 9

int busca(int mat[LINHA][COLUNA], int chave, int lin, int col);
void mostrar_matriz(int mat[LINHA][COLUNA]);
int validar_quadrado(int mat[LINHA][COLUNA]);

int main()
{
	int matriz[LINHA][COLUNA], i, j;

	for (i = 0; i < LINHA; i++)
	{
		for (j = 0; j < COLUNA; j++)
		{
			printf("Digite um numero para a posicao [%d][%d] do quadrado magico: ", i + 1, j + 1);
			scanf("%d", &matriz[i][j]);
			if (busca(matriz, matriz[i][j], i, j))
			{
				if (i == 0 && j == 0)
					break;
				printf("Numero repetido, digite outro para a posicao [%d][%d] do quadrado magico: ", i + 1, j + 1);
				scanf("%d", &matriz[i][j]);
			}
		}
	}

	mostrar_matriz(matriz);

	if (validar_quadrado(matriz))
		printf("Os valores inseridos formam um quadrado magico.\n");
	else
		printf("Os valores inseridos NAO formam um quadrado magico.\n");

	system("pause");
	return 0;
}

int busca(int mat[LINHA][COLUNA], int chave, int lin, int col)
{
	int i, j;
	for (i = 0; i <= lin; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (mat[i][j] == chave)
			{
				if (i == lin && j == col)
					break;
				return 1;
			}
		}
	}

	return 0;
}

void mostrar_matriz(int mat[LINHA][COLUNA])
{
	int i, j;
	printf("\n Matriz: \n");
	for (i = 0; i < LINHA; i++)
	{
		for (j = 0; j < COLUNA; j++)
		{
			printf(" %d ", mat[i][j]);
		}
		printf("\n");
	}
}

int validar_quadrado(int mat[LINHA][COLUNA])
{
	int soma_linhas[LINHA], soma_colunas[COLUNA], soma_diagonalP = 0, soma_diagonalS = 0;
	int i, j, flag = 1, soma = 0;

	// zerando os vetores
	for (i = 0; i < LINHA; i++)
	{
		soma_linhas[i] = 0;
		soma_colunas[i] = 0;
	}

	/*
			Para avaliar o quadrado mágico, pensei na seguinte solução:
			- são 9 linhas, 9 colunas e 2 diagonais;
			- para avaliar se é um quadrado mágico, é necessário que a soma de cada linha, coluna e diagonal seja igual;
	*/

	// soma dos valores
	for (i = 0; i < LINHA; i++)
	{
		for (j = 0; j < COLUNA; j++)
		{
			// soma da diagonal principal
			if (i == j)
				soma_diagonalP += mat[i][j];

			// soma da diagonal secundaria
			if ((i + j) == (LINHA - 1))
				soma_diagonalS += mat[i][j];

			// soma das linhas
			soma_linhas[i] += mat[i][j];

			// soma das colunas
			soma_colunas[j] += mat[i][j];
		}
	}

	// imprimir a soma das linhas, colunas e diagonais e jáa verificar se é um quadrado mágico
	printf("\nSoma das linhas: ");
	for (i = 0; i < LINHA; i++)
	{
		soma += soma_linhas[i];
		printf("%d ", soma_linhas[i]);
	}

	// verifica se a soma das linhas é igual
	if (soma != (soma_linhas[0] * LINHA)) flag = 0;
	soma = 0;

	printf("\nSoma das colunas: ");
	for (i = 0; i < COLUNA; i++)
	{
		soma += soma_colunas[i];
		printf("%d ", soma_colunas[i]);
	}

	// verifica se a soma das colunas é igual
	if (soma != (soma_colunas[0] * COLUNA)) flag = 0;
	// verifica se a soma das diagonais é igual em ambas as diagonais
	if (soma_diagonalP != soma_diagonalS) flag = 0;
	// verifica se a soma das diagonais é igual	
	if (soma_diagonalP != soma/COLUNA) flag = 0;
	if (soma_diagonalS != soma/COLUNA) flag = 0;
		
	printf("\n\nSoma da diagonal principal: %d\n", soma_diagonalP);
	printf("Soma da diagonal secundaria: %d\n\n", soma_diagonalS);

	// teste
	if (flag)
		return 1;
	else
		return 0;
}